import { Directive, ElementRef, HostListener, Input, OnDestroy } from "@angular/core";
import { NgControl } from "@angular/forms";
import { Subscription } from "rxjs";

@Directive({
      selector: '[appMoney]',
      standalone: true
})
export class MoneyFormatDirective implements OnDestroy {
      // S·ªë ch·ªØ s·ªë th·∫≠p ph√¢n mu·ªën hi·ªÉn th·ªã (VND th∆∞·ªùng = 0)
      @Input('appMoneyDecimals') decimals = 0;

      private subscription?: Subscription;
      private composing = false;
      private updatingView = false;

      constructor(private element: ElementRef<HTMLInputElement>, private ngControl: NgControl) {
            // N·∫øu value thay ƒë·ªïi t·ª´ code, format l·∫°i display
            this.subscription = this.ngControl.control?.valueChanges.subscribe(v => {
                  if (this.element.nativeElement !== document.activeElement) {
                        // ch·∫°y sau khi Angular ƒë√£ writeValue ƒë·ªÉ kh√¥ng b·ªã ghi ƒë√®
                        Promise.resolve().then(() => {
                              this.updatingView = true;                              // <-- b·∫≠t c·ªù
                              this.element.nativeElement.value = this.formatFromNumber(v);
                              this.updatingView = false;                             // <-- t·∫Øt c·ªù
                        });
                  }
            });
      }

      ngOnDestroy(): void {
            this.subscription?.unsubscribe();
      }

      
      @HostListener('input', ['$event'])
      onInput(event: Event) {
            if (this.composing || this.updatingView) return;            // <-- CH·∫∂N t√°i nh·∫≠p

            const input = this.element.nativeElement;
            const prev = input.value;
            const selectionStart = input.selectionStart ?? prev.length;
            const unitsBeforeCaret = this.countUnits(prev.slice(0, selectionStart)); // ƒê·∫øm "ƒë∆°n v·ªã ƒë·∫øm caret" (digit + d·∫•u th·∫≠p ph√¢n n·∫øu cho ph√©p) tr∆∞·ªõc caret c≈©

            const normalized = this.normalize(prev); // Chu·∫©n h√≥a chu·ªói (ch·ªâ c√≤n s·ªë v√† (.) n·∫øu decimals>0) + gi·ªõi h·∫°n s·ªë l·∫ª

            // C·∫≠p nh·∫≠t FormControl v·ªõi number
            const numeric = this.toNumber(normalized);
            this.ngControl.control?.setValue(numeric, { emitEvent: true });

            // üîí Ch·ªâ set v√†o FormControl n·∫øu gi√° tr·ªã TH·ª∞C S·ª∞ kh√°c,
            // tr√°nh set ƒë√® tr√πng v·ªõi DefaultValueAccessor
            const ctrl = this.ngControl.control;
            Promise.resolve().then(() => {
                  if (ctrl && ctrl.value !== numeric) {
                        ctrl.setValue(numeric, { emitEvent: true });
                  }
            });

            // Format hi·ªÉn th·ªã v·ªõi d·∫•u ph·∫©y
            const formatted = this.formatFromString(normalized);

            this.updatingView = true;                                   // <-- b·∫≠t c·ªù
            input.value = formatted;
            // ƒê·∫∑t l·∫°i caret d·ª±a tr√™n s·ªë "ƒë∆°n v·ªã" tr∆∞·ªõc caret
            const newCaret = this.indexFromUnits(formatted, unitsBeforeCaret);
            input.setSelectionRange(newCaret, newCaret);
            this.updatingView = false;                                  // <-- t·∫Øt c·ªù
      }

      @HostListener('focus')
      onFocus() {
            const value = this.ngControl.control?.value;
            this.element.nativeElement.value = value ?? '';
            this.element.nativeElement.select();
      }

      @HostListener('blur')
      onBlur() {
            const current = Number(this.ngControl.control?.value ?? this.element.nativeElement.value);
            const rounded = (this.decimals === 0) ? Math.round(current) : Number(current.toFixed(this.decimals));

            this.ngControl.control?.setValue(rounded, { emitEvent: true });
            this.updatingView = true;                                   // <-- b·∫≠t c·ªù

            this.element.nativeElement.value = this.formatFromNumber(rounded);
            this.updatingView = false;                                  // <-- t·∫Øt c·ªù
      }

      @HostListener('compositionstart') onCompStart() { this.composing = true; }
      @HostListener('compositionend') onCompEnd() { this.composing = false; }

      // ---------- Helpers ----------
      /** Lo·∫°i b·ªè m·ªçi k√Ω t·ª± ngo√†i digit (v√† '.' n·∫øu cho ph√©p), c·∫Øt s·ªë l·∫ª theo this.decimals */
      private normalize(text: string): string {
            if (!text) return '';
            const allowDot = this.decimals > 0;

            // Gi·ªØ s·ªë v√† (t·ªëi ƒëa m·ªôt) d·∫•u '.'
            let cleaned = text.replace(/[^\d.]/g, '');
            if (!allowDot) {
                  cleaned = cleaned.replace(/\./g, '');
                  return cleaned.replace(/^0+(\d)/, '$1'); // b·ªè 0 ƒë·∫ßu n·∫øu d√†i
            }

            // Cho ph√©p 1 d·∫•u '.' v√† gi·ªõi h·∫°n s·ªë l·∫ª
            const firstDot = cleaned.indexOf('.');
            if (firstDot >= 0) {
                  const intPart = cleaned.slice(0, firstDot).replace(/\./g, '');
                  let fracPart = cleaned.slice(firstDot + 1).replace(/\./g, '');
                  if (this.decimals >= 0) 
                        fracPart = fracPart.slice(0, this.decimals);
                  cleaned = intPart + '.' + fracPart;
            } else {
                  cleaned = cleaned.replace(/\./g, '');
            }
            return cleaned.replace(/^0+(\d)/, '$1');
      }

      /** Chuy·ªÉn chu·ªói normalized -> number */
      private toNumber(normalized: string): number {
            if (!normalized) 
                  return 0;
            const n = Number(normalized);
            return isNaN(n) ? 0 : n;
      }

      /** Format t·ª´ number (s·ª≠ d·ª•ng Intl). V·ªõi decimals=0 kh√¥ng c√≥ ph·∫ßn l·∫ª. */
      private formatFromNumber(val: unknown): string {
            const n = Number(val);
            if (isNaN(n)) return '';
            return new Intl.NumberFormat('en-US', {
                  minimumFractionDigits: this.decimals,
                  maximumFractionDigits: this.decimals,
            }).format(n);
      }

      /** Format t·ª´ chu·ªói normalized (t·ª± format ph·∫ßn nguy√™n, gi·ªØ nguy√™n ph·∫ßn l·∫ª) */
      private formatFromString(normalized: string): string {
            if (!normalized) return '';
            if (this.decimals === 0) {
                  const intOnly = normalized.replace(/\./g, '');
                  return this.groupThousands(intOnly);
            }
            const [i, f = ''] = normalized.split('.');
            const intGrouped = this.groupThousands(i);
            return f.length ? `${intGrouped}.${f}` : intGrouped;
      }

      /** Th√™m d·∫•u ph·∫©y ph·∫ßn nguy√™n */
      private groupThousands(intStr: string): string {
            if (!intStr) 
                  return '0';
            return intStr.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      }

      /** ƒê·∫øm "ƒë∆°n v·ªã caret": digit + ('.' n·∫øu decimals>0) trong chu·ªói */
      private countUnits(s: string): number {
            const allowDot = this.decimals > 0;
            let cnt = 0;
            for (const ch of s) {
                  if (/\d/.test(ch) || (allowDot && ch === '.')) cnt++;
            }
            return cnt;
      }

      /** T√¨m index trong formatted sao cho s·ªë "ƒë∆°n v·ªã" tr∆∞·ªõc index kh·ªõp units */
      private indexFromUnits(formatted: string, units: number): number {
            if (units <= 0) 
                  return 0;

            const allowDot = this.decimals > 0;
            let cnt = 0;
            for (let i = 0; i < formatted.length; i++) {
                  const ch = formatted[i];
                  if (/\d/.test(ch) || (allowDot && ch === '.')) {
                        cnt++;
                        if (cnt === units) return i + 1;
                  }
            }
            return formatted.length;
      }
}